import shutil
import itertools
from pathlib import Path
from typing import Optional

import typer
from typing_extensions import Annotated

from toolchain_package_builder.package_creator import PACKAGE_NAME, build_package

app = typer.Typer()


@app.command()
def clean():
    """
    Cleans the project from any build artifacts.
    """
    print("Cleaning project")
    project_root = Path(__file__).resolve().parents[1]
    files = [
        project_root / PACKAGE_NAME / "MANIFEST.in",
        project_root / PACKAGE_NAME / "pyproject.toml",
    ]
    folders = [
        project_root / PACKAGE_NAME / "src" / f"{PACKAGE_NAME}.egg-info",
        project_root / PACKAGE_NAME / "build",
    ]

    print("\nDeleting explicity files and folders...")
    for file in files:
        if file.exists():
            file.unlink()
            print(f"\tDeleted file: {file.relative_to(project_root)}")
    for folder in folders:
        if folder.exists():
            shutil.rmtree(folder)
            print(f"\tDeleted folder: {folder.relative_to(project_root)}")

    # All autogenerated "run_*.py" files
    print("\nFinding run_*.py files...")
    for run_file in (project_root / PACKAGE_NAME / "src" / PACKAGE_NAME).rglob(
        "run_*.py"
    ):
        run_file.unlink()
        print(f"\tDeleted file: {run_file.relative_to(project_root)}")

    # Find all __pycache__ folders and delete them, excluding directories starting with a dot
    print("\nFinding __pycache__ folders...")
    for folder in project_root.rglob("__pycache__"):
        if not folder.relative_to(project_root).parts[0].startswith("."):
            shutil.rmtree(folder)
            print(f"\tDeleted folder: {folder.relative_to(project_root)}")

    # Find any GCC folders or compressed files and delete them
    print("\nFinding GCC folders and compressed files...")
    gcc_files = itertools.chain(
        project_root.rglob("gcc-arm-*"),
        project_root.rglob("arm-gnu-toolchain*"),
    )
    for file in gcc_files:
        if file.relative_to(project_root).parts[0].startswith("."):
            continue
        if file.is_file() and str(file).endswith((".zip", ".tar.bz2", ".tar.xz")):
            file.unlink()
            print(f"\tDeleted file: {file.relative_to(project_root)}")
        elif file.is_dir():
            shutil.rmtree(file)
            print(f"\tDeleted folder: {file.relative_to(project_root)}")

    print("\nCleaning done!")


@app.command()
def build(
    release: Annotated[Optional[str], typer.Option(help="GCC release name")] = None,
    os: Annotated[Optional[str], typer.Option(help="Operating System name")] = None,
    arch: Annotated[Optional[str], typer.Option(help="CPU architecture")] = None,
):
    clean()
    print("\nBuilding package")
    build_package(release, os, arch)


def main():
    app()


if __name__ == "__main__":
    main()
