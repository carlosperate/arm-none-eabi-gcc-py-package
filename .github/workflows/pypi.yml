name: Publish Python Source distribution to (test) PyPI

on:
  release:
    types: published

jobs:

  test-release:
    strategy:
      matrix:
        # macOS 13 is x86_64 and macOS 14 is arm64
        os: [ubuntu-20.04, macos-13, macos-14, windows-2019]
        python: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: "Test ${{ matrix.os }} - Py ${{ matrix.python }}"
    steps:
      - name: Set the GH Release tag to step output
        id: get_tag
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      # macOS arm64 only has GCC releases from 12.2.Rel1
      - name: Determine if the rest of the workflow should run
        id: test_this_platform
        run: |
          python - << EOF
          import platform as p
          macOS_arm = 'darwin' in p.system().lower() and 'arm' in p.processor().lower()
          # Expected tag in format v1.2.3
          version_major = int('${{ steps.get_tag.outputs.tag }}'[1:].split('.')[0])
          with open('continue.txt', 'w') as f:
              f.write('true' if not macOS_arm or (macOS_arm and version_major >= 12) else 'false')
          EOF
          echo "run=$(cat continue.txt)"
          echo "run=$(cat continue.txt)" >> $GITHUB_OUTPUT

      - name: Set up Python
        if: steps.test_this_platform.outputs.run == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python }}"

      # - name: Set the GCC version to step output
      #  if: steps.test_this_platform.outputs.run == 'true'
      #  id: get_gcc_version
      #  working-directory: ./project
      #  shell: bash
      #  run: |
      #    GCC_VERSION=$(gh release view ${{ steps.get_tag.outputs.tag }} --json body | jq -r ".body")
      #    echo "version=$GCC_VERSION"
      #    echo "version=$GCC_VERSION" >> $GITHUB_OUTPUT

      - name: Download GH Release wheels
        if: steps.test_this_platform.outputs.run == 'true'
        run: |
          mkdir wheels
          gh release download ${{ steps.get_tag.outputs.tag }} --repo ${{ github.server_url }}/${{ github.repository }} --dir wheels --pattern "*.whl"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Verify GCC arm-none-eabi is not present yet
        if: steps.test_this_platform.outputs.run == 'true'
        shell: bash
        run: |
          if arm-none-eabi-gcc --version; then
            exit 1
          else
            exit 0
          fi

      - name: Install arm-none-eabi-gcc-toolchain from wheels
        if: steps.test_this_platform.outputs.run == 'true'
        run: pip install --no-index --find-links=wheels/ arm-none-eabi-gcc-toolchain

      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3

      - name: Verify GCC Installation
        if: steps.test_this_platform.outputs.run == 'true'
        run: arm-none-eabi-gcc --version

      - name: Clone STM32 project
        if: steps.test_this_platform.outputs.run == 'true'
        uses: actions/checkout@v4
        with:
          repository: 'trebisky/stm32f103'
          ref: 7cfe5feaf02c653352331374d2ad178eb04efde7
          path: 'stm32f103/'
      - name: Build simple blinky project
        if: steps.test_this_platform.outputs.run == 'true'
        working-directory: ./stm32f103/blink1/
        run: make all


  publish-pypi:
    needs: test-release
    name: Publish to PyPI ðŸ“¦
    runs-on: ubuntu-20.04
    environment:
      # Need to configure this when ready
      # https://pypi.org/manage/account/publishing/
      # name: pypi
      # url: https://pypi.org/p/wheel-stub
      name: testpypi
      url: https://test.pypi.org/p/arm-none-eabi-gcc-toolchain-t1
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Set the GH Release tag to step output
        id: get_tag
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Download GH Release source distribution
        run: |
          mkdir dist
          gh release download v${{ steps.get_version.outputs.version }} --repo ${{ github.server_url }}/${{ github.repository }} --dir dist --pattern "arm_none_eabi_gcc_toolchain-*.tar.gz"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Publish source distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
