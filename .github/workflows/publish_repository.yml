name: Deploy Package Repository

on: [workflow_dispatch, workflow_call]

jobs:
  build-package-repo:
    runs-on: ubuntu-latest
    name: 🏗️ Build Package Repository
    steps:
      - uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: pip install -r requirements.txt --disable-pip-version-check

      - name: Build Static Simple Repository
        run: python tools.py repo-generator --repo "${{ github.repository }}"

      - name: Upload Artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: simple_repository_static/


  deploy-package-repo:
    needs: build-package-repo
    name: 🚀 Deploy Package Repository
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


  setup-matrix:
    name: 🕸️ Setup GCC matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - run: pip install -r requirements.txt --disable-pip-version-check
      - run: echo "matrix=$(python tools.py package-versions)"
      - id: set-matrix
        run: echo "matrix=$(python tools.py package-versions)" >> $GITHUB_OUTPUT


  install-from-package-repo:
    needs: ["setup-matrix", "deploy-package-repo"]
    strategy:
      matrix:
        # macOS 13 is x86_64 and macOS 14 is arm64
        os: [ubuntu-20.04, ubuntu-22.04-arm, macos-13, macos-14, windows-2019]
        gcc: ${{ fromJSON(needs.setup-matrix.outputs.matrix) }}
        python: ["3.6", "3.8"]
        exclude:
          # macOS arm64 and Ubuntu aarch64 only has Python 3.8+
          - os: macos-14
            python: "3.6"
          - os: ubuntu-22.04-arm
            python: "3.6"
          # GCC 13+ need macOS 12+ and last pip release for Py3.6 is
          # not compatible with that wheel platform specification
          - os: macos-13
            python: "3.6"
          # The others can run on Python 3.6
          - os: ubuntu-20.04
            python: "3.8"
          - os: windows-2019
            python: "3.8"
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: "⤵️ ${{ matrix.gcc }} ${{ matrix.os }} Py${{ matrix.python }}"
    steps:
      - name: Checkout the project in a subdirectory
        uses: actions/checkout@v4
        with:
          path: "project"

      - name: Install Dependencies
        working-directory: project
        run: pip install -r requirements.txt --disable-pip-version-check

      # macOS arm64 only has GCC releases from 12.2.Rel1
      - name: Determine if the rest of the workflow should run
        id: test_this_platform
        shell: bash
        working-directory: project/.github/workflows/
        run: |
          echo "run=$(python is_compat_platform.py ${{ steps.get_tag.outputs.tag }})"
          echo "run=$(python is_compat_platform.py ${{ steps.get_tag.outputs.tag }})" >> $GITHUB_OUTPUT

      - name: Generate the Python package version from the GCC version 
        id: py_package_version
        shell: bash
        working-directory: project
        run: |
          python tools.py package-get-version ${{ matrix.gcc }}
          echo "ver=$(python tools.py package-get-version ${{ matrix.gcc }})"
          echo "ver=$(python tools.py package-get-version ${{ matrix.gcc }})" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Verify GCC arm-none-eabi is not present yet
        shell: bash
        run: |
          if arm-none-eabi-gcc --version; then
            exit 1
          else
            exit 0
          fi

      - name: Install arm-none-eabi-gcc-toolchain from extra index URL
        if: steps.test_this_platform.outputs.run == 'true'
        run: pip install arm-none-eabi-gcc-toolchain==${{ steps.py_package_version.outputs.ver }} --index-url https://carlosperate.github.io/arm-none-eabi-gcc-py-package
      - name: Verify GCC Installation
        if: steps.test_this_platform.outputs.run == 'true'
        run: arm-none-eabi-gcc --version

      - name: Clone STM32 project
        if: steps.test_this_platform.outputs.run == 'true'
        uses: actions/checkout@v4
        with:
          repository: 'trebisky/stm32f103'
          ref: 7cfe5feaf02c653352331374d2ad178eb04efde7
          path: 'stm32f103/'
      - name: Build simple blinky project
        if: steps.test_this_platform.outputs.run == 'true'
        working-directory: ./stm32f103/blink1/
        run: make all
